# 1-Stop MCP Shop Project Notes

## Issue Fixed: Missing MCP Modules
- Created missing modules needed for the Archon swarm system:
  1. `mcp_archon_create_thread.py` - For creating new Archon conversation threads
  2. `mcp_archon_run_agent.py` - For running Archon agents with user input

## New Integration: MCP Client UI
- Created `mcp_client_ui.py` to connect the Archon swarm with the existing Next.js UI
- This provides a beautiful UI for interacting with MCP servers
- The UI allows users to:
  - Connect to MCP servers
  - Send messages to LLMs with MCP tool access
  - View server details and available tools
  - Add new servers via URL or configuration

## Abacus MCP Integration
- Created custom connector for Abacus MCP server: `abacus_mcp_connector.py`
- Handles the special WebSocket protocol required by Abacus
- Implemented diagnostic tool `diagnose_abacus_mcp.py` for troubleshooting connection issues
- Identified the root cause of the HTTP 500 error (using wrong protocol - needs WebSocket)

## How to Connect to Abacus MCP
```bash
python mcp_client_ui.py --server-urls "https://10967c9f45.dev.abacusai.app/api/mcp/connect"
```

## How to Run the MCP Client UI
```bash
python mcp_client_ui.py --server-paths weather_mcp_server.js
```

This will:
1. Start the Next.js frontend
2. Connect to the specified MCP servers
3. Register them with an Archon agent
4. Make the UI available at http://localhost:3000/client

## How the Archon Swarm System Works
The Archon swarm system is a multi-agent framework that:
1. Creates a new conversation thread using `mcp_archon_create_thread`
2. Initializes a swarm of specialized agents (coordinator, researcher, reasoner, etc.)
3. Runs multiple iterations of agent collaboration using `mcp_archon_run_agent`
4. Produces a final synthesized result from all agents

## Usage (Archon Swarm)
Run the system with a specific task:
```bash
python archon_swarm_runner.py --task "Your task description here"
```

## Project Structure
- React/Next.js frontend for UI
- Python backend for agent operations
- JavaScript MCP servers for various data sources
- Multiple agents working together through Archon
- Custom connectors for specialized MCP servers